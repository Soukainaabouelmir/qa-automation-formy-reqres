{"name": "Test du champ Date avec un format invalide", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6f8271eb5+80197]\n\tGetHandleVerifier [0x0x7ff6f8271f10+80288]\n\t(No symbol) [0x0x7ff6f7ff02fa]\n\t(No symbol) [0x0x7ff6f7ff7e5a]\n\t(No symbol) [0x0x7ff6f7ffb2b1]\n\t(No symbol) [0x0x7ff6f8099b7b]\n\t(No symbol) [0x0x7ff6f807037a]\n\t(No symbol) [0x0x7ff6f80987fb]\n\t(No symbol) [0x0x7ff6f8070153]\n\t(No symbol) [0x0x7ff6f8038b02]\n\t(No symbol) [0x0x7ff6f80398d3]\n\tGetHandleVerifier [0x0x7ff6f852e83d+2949837]\n\tGetHandleVerifier [0x0x7ff6f8528c6a+2926330]\n\tGetHandleVerifier [0x0x7ff6f85486c7+3055959]\n\tGetHandleVerifier [0x0x7ff6f828cfee+191102]\n\tGetHandleVerifier [0x0x7ff6f82950af+224063]\n\tGetHandleVerifier [0x0x7ff6f827af64+117236]\n\tGetHandleVerifier [0x0x7ff6f827b119+117673]\n\tGetHandleVerifier [0x0x7ff6f82610a8+11064]\n\tBaseThreadInitThunk [0x0x7ff87b78e8d7+23]\n\tRtlUserThreadStart [0x0x7ff87cb28d9c+44]", "trace": "@allure.title(\"Test du champ Date avec un format invalide\")\n    @allure.description(\"Vérifie que le champ Date ne permet pas la soumission avec un format invalide (YYYY-MM-DD).\")\n    def test_invalid_date_format():\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(\"https://formy-project.herokuapp.com/form\")\n    \n        # Renseigner un format invalide dans le champ date\n        date_field = driver.find_element(By.ID, \"datepicker\")\n        date_field.clear()\n        date_field.send_keys(\"2025-10-12\")  # Format ISO (invalide pour ce champ)\n        date_field.send_keys(Keys.TAB)  # Sortir du champ pour déclencher validation\n    \n        # Soumettre le formulaire\n        submit_button = driver.find_element(By.CSS_SELECTOR, \".btn.btn-lg.btn-primary\")\n        submit_button.click()\n    \n        # Pause pour observation ou analyse\n        time.sleep(2)\n    \n        # Récupérer la valeur du champ après soumission\n>       value = date_field.get_attribute(\"value\")\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_invalid_date_format.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in get_attribute\n    attribute_value = self.parent.execute_script(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:555: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016B953F7710>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff6f82610a8+11064]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff87b78e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff87cb28d9c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6f8271eb5+80197]\nE       \tGetHandleVerifier [0x0x7ff6f8271f10+80288]\nE       \t(No symbol) [0x0x7ff6f7ff02fa]\nE       \t(No symbol) [0x0x7ff6f7ff7e5a]\nE       \t(No symbol) [0x0x7ff6f7ffb2b1]\nE       \t(No symbol) [0x0x7ff6f8099b7b]\nE       \t(No symbol) [0x0x7ff6f807037a]\nE       \t(No symbol) [0x0x7ff6f80987fb]\nE       \t(No symbol) [0x0x7ff6f8070153]\nE       \t(No symbol) [0x0x7ff6f8038b02]\nE       \t(No symbol) [0x0x7ff6f80398d3]\nE       \tGetHandleVerifier [0x0x7ff6f852e83d+2949837]\nE       \tGetHandleVerifier [0x0x7ff6f8528c6a+2926330]\nE       \tGetHandleVerifier [0x0x7ff6f85486c7+3055959]\nE       \tGetHandleVerifier [0x0x7ff6f828cfee+191102]\nE       \tGetHandleVerifier [0x0x7ff6f82950af+224063]\nE       \tGetHandleVerifier [0x0x7ff6f827af64+117236]\nE       \tGetHandleVerifier [0x0x7ff6f827b119+117673]\nE       \tGetHandleVerifier [0x0x7ff6f82610a8+11064]\nE       \tBaseThreadInitThunk [0x0x7ff87b78e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff87cb28d9c+44]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "description": "Vérifie que le champ Date ne permet pas la soumission avec un format invalide (YYYY-MM-DD).", "start": 1759737422617, "stop": 1759737431360, "uuid": "829c93ff-b76a-4398-bdde-3a8f24b6323a", "historyId": "e6577017dcf6774050596fd118f8df03", "testCaseId": "e6577017dcf6774050596fd118f8df03", "fullName": "test_invalid_date_format#test_invalid_date_format", "labels": [{"name": "suite", "value": "test_invalid_date_format"}, {"name": "host", "value": "DESKTOP-HA98HUQ"}, {"name": "thread", "value": "22648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_invalid_date_format"}], "titlePath": ["test_invalid_date_format.py"]}